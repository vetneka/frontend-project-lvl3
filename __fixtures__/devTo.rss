<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Error Handling In React.</title>
      <author>Barnabas Babatunde</author>
      <pubDate>Thu, 27 May 2021 12:03:47 +0000</pubDate>
      <link>https://dev.to/barnabas19/error-handling-in-react-3h0a</link>
      <guid>https://dev.to/barnabas19/error-handling-in-react-3h0a</guid>
      <description>&lt;h3&gt;          &lt;a href="#introduction"&gt;          &lt;/a&gt;          Introduction        &lt;/h3&gt;
        &lt;p&gt;In this article, we are going to cover the basics of error handling in React. At the end of this article, you should:&lt;/p&gt;
        &lt;ol&gt;        &lt;li&gt;know what an error boundary is, and how to build one.&lt;/li&gt;        &lt;li&gt;know the two methods involved in error handling phase of a React component:- &lt;code&gt;componentDidCatch(error, info)&lt;/code&gt; and &lt;code&gt;static getDerivedStateFromError(error)&lt;/code&gt;        &lt;/li&gt;        &lt;li&gt;become a better React developer üòÅ&lt;/li&gt;        &lt;/ol&gt;
        &lt;p&gt;&lt;br&gt;&lt;br&gt;        Let's dive in.&lt;/p&gt;        &lt;h3&gt;          &lt;a href="#error-boundaries-the-what"&gt;          &lt;/a&gt;          Error Boundaries: The What.        &lt;/h3&gt;
        &lt;p&gt;Error boundaries are class components designed to catch run-time errors anywhere in the React component tree, and display a fallback view (user interface) in the event of such errors. It usually implements either one or both of the (lifecycle) methods:- &lt;code&gt;componentDidCatch&lt;/code&gt; or &lt;code&gt;getDerivedStateFromError&lt;/code&gt;&lt;/p&gt;

        &lt;h3&gt;          &lt;a href="#error-boundaries-the-why"&gt;          &lt;/a&gt;          Error Boundaries: The Why.        &lt;/h3&gt;
        &lt;p&gt;When an error occurs at run-time, React basically unmounts the entire component tree, leaving our application broken, with an error message popping up:&lt;br&gt;        &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O6ydotfb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7rz6v2qrwipja5cttz2u.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O6ydotfb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7rz6v2qrwipja5cttz2u.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;br&gt;&lt;br&gt;        Take for instance, an e-commerce application. We definitely do not want our customers to have something like that pop up on their devices whenever an error occurs in the application. Instead, we want to prepare (beforehand) a fallback view, and render that view in case an error occurs in production. We can achieve this with error boundaries!&lt;/p&gt;        &lt;h3&gt;          &lt;a href="#-raw-componentdidcatch-endraw-and-raw-getderivedstatefromerror-endraw-"&gt;          &lt;/a&gt;          &lt;code&gt;componentDidCatch&lt;/code&gt; and &lt;code&gt;getDerivedStateFromError&lt;/code&gt;        &lt;/h3&gt;
        &lt;p&gt;These are two lifecycle methods implemented in an error boundary. Recall that an error boundary is simply a React class component. &lt;code&gt;getDerivedStateFromError&lt;/code&gt; is used to render a fallback view whenever an error occurs. &lt;code&gt;componentDidCatch&lt;/code&gt; is used to log the error information.&lt;/p&gt;        &lt;h3&gt;          &lt;a href="#lets-build-an-error-boundary"&gt;          &lt;/a&gt;          Let's Build An Error Boundary        &lt;/h3&gt;
        &lt;p&gt;First, we create a component called &lt;code&gt;Demo&lt;/code&gt; in &lt;code&gt;Demo.js&lt;/code&gt; file, and mount the component in our &lt;code&gt;App.js&lt;/code&gt; file. All &lt;code&gt;Demo&lt;/code&gt; does is render a simple view.&lt;/p&gt;
        &lt;p&gt;&lt;br&gt;&lt;br&gt;        &lt;code&gt;Demo.js&lt;/code&gt;:&lt;br&gt;        &lt;/p&gt;
        &lt;div class="highlight js-code-highlight"&gt;        &lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;        &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Demo.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;                &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;An error occurred&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is a &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; text&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;                &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;


        &lt;p&gt;&lt;br&gt;&lt;br&gt;        &lt;code&gt;App.js&lt;/code&gt;:&lt;br&gt;        &lt;/p&gt;
        &lt;div class="highlight js-code-highlight"&gt;        &lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Demo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Demo&lt;/span&gt;  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"black"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;          &lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;        &lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;


        &lt;p&gt;Output:&lt;br&gt;        &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x2OqpJjf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9gmzrmhw9zewhjjnkmz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x2OqpJjf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9gmzrmhw9zewhjjnkmz.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;br&gt;&lt;br&gt;        Now, let's mount two more instances of &lt;code&gt;Demo&lt;/code&gt; in &lt;code&gt;App&lt;/code&gt;. We now have a total number of three &lt;code&gt;Demo&lt;/code&gt; components in &lt;code&gt;App&lt;/code&gt;. One out of the three components throws an error.&lt;br&gt;        &lt;/p&gt;
        &lt;div class="highlight js-code-highlight"&gt;        &lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Demo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Demo&lt;/span&gt;  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"black"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Demo&lt;/span&gt;  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"black"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Demo&lt;/span&gt;  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"white"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;          &lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;        &lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;


        &lt;p&gt;This crashes the entire application:&lt;br&gt;        &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ia3p-5hs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/daj5i65wslajotdkco1s.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ia3p-5hs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/daj5i65wslajotdkco1s.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;br&gt;&lt;br&gt;        &lt;strong&gt;We do not want our entire application to crash just because of one (or few) component(s) that has/have an error.&lt;/strong&gt; Instead, we wrap that component with an error boundary. By wrapping such component with an error boundary, only that component is affected (and handled). The remaining components still remain unaffected.&lt;br&gt;        As the name implies - &lt;strong&gt;error boundary&lt;/strong&gt;, we are setting boundaries around errorsüòÉ&lt;/p&gt;
        &lt;p&gt;Let's now go ahead and build our error boundary! Go back to your text editor and create a new file. Name it whatever you like. But I'll call mine &lt;code&gt;ErrorBoundary.js&lt;/code&gt; for semantics. In &lt;code&gt;ErrorBoundary.js&lt;/code&gt;, I will create a class component called &lt;code&gt;ErrorBoundary&lt;/code&gt;:&lt;br&gt;        &lt;/p&gt;
        &lt;div class="highlight js-code-highlight"&gt;        &lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;            &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;                &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                    &lt;span class="na"&gt;throwsError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;                &lt;span class="p"&gt;}&lt;/span&gt;            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;getDerivedStateFromError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                    &lt;span class="na"&gt;throwsError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;                &lt;span class="p"&gt;}&lt;/span&gt;            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;componentDidCatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;throwsError&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Oops! An error occurred&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;                    &lt;span class="p"&gt;)&lt;/span&gt;                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;            &lt;span class="p"&gt;}&lt;/span&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt;        &lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;


        &lt;p&gt;&lt;br&gt;&lt;br&gt;        Afterwards, I will import my &lt;code&gt;ErrorBoundary&lt;/code&gt; component in &lt;code&gt;App&lt;/code&gt; and wrap all three &lt;code&gt;Demo&lt;/code&gt; components with &lt;code&gt;ErrorBoundary&lt;/code&gt;:&lt;br&gt;        &lt;/p&gt;
        &lt;div class="highlight js-code-highlight"&gt;        &lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Demo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;        &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./ErrorBoundary&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ErrorBoundary&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Demo&lt;/span&gt;  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"black"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Demo&lt;/span&gt;  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"black"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Demo&lt;/span&gt;  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"white"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;              &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ErrorBoundary&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;          &lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;


        &lt;p&gt;Output: &lt;br&gt;&lt;br&gt;        &lt;strong&gt;Note&lt;/strong&gt;: In the development environment, we still see the error. This is because React still wants you to know the source of your errors and make sure you fix them, while building your application. &lt;strong&gt;Error boundaries are only useful in production environments&lt;/strong&gt;. So, it's an intended behaviour:&lt;br&gt;        &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j_xe9fFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vu0ym1dfy4403srorp19.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j_xe9fFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vu0ym1dfy4403srorp19.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;However, you can click on the close button at the top right, so that you can see your fallback view in action:&lt;/p&gt;
        &lt;p&gt;&lt;br&gt;&lt;br&gt;        &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--twAD0U9z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4d7103qh0jx702s9zy0l.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--twAD0U9z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4d7103qh0jx702s9zy0l.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;        We can see how our fallback view is gracefully rendered. You can be as creative as you like with your fallback user interface.&lt;/p&gt;

        &lt;h4&gt;          &lt;a href="#let-us-walk-through-the-raw-errorboundary-endraw-component-source-code"&gt;          &lt;/a&gt;          Let us walk through the &lt;code&gt;ErrorBoundary&lt;/code&gt; component source code:        &lt;/h4&gt;
        &lt;p&gt;Within the class, we define a &lt;code&gt;constructor&lt;/code&gt; which initializes the class with some state. In &lt;code&gt;this.state&lt;/code&gt; object, we set a state property &lt;code&gt;throwsError&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; initially.&lt;/p&gt;
        &lt;p&gt;Next we define a method &lt;code&gt;static getDerivedStateFromError(error)&lt;/code&gt;. This method receives a parameter &lt;code&gt;error&lt;/code&gt;. Within the function body, we returned a new state object which has a property called &lt;code&gt;throwsError&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;. This new state object will be used to change &lt;code&gt;this.state.throwsError&lt;/code&gt; (initially set to &lt;code&gt;false&lt;/code&gt; in the &lt;code&gt;constructor&lt;/code&gt;) to &lt;code&gt;true&lt;/code&gt; whenever a component throws an error.&lt;/p&gt;
        &lt;p&gt;&lt;br&gt;&lt;br&gt;        A change in state (&lt;code&gt;this.state.throwsError&lt;/code&gt;) will trigger a rerender lifecycle, causing our fallback view to be displayed.&lt;/p&gt;
        &lt;p&gt;&lt;br&gt;&lt;br&gt;        In the &lt;code&gt;render()&lt;/code&gt; method, we create our desired fallback view (the &lt;code&gt;h1&lt;/code&gt; tag) which will display when &lt;code&gt;this.state.throwsError&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. Or else, display the actual child components (&lt;code&gt;this.props.children&lt;/code&gt;) when there is no error.&lt;/p&gt;
        &lt;p&gt;In &lt;code&gt;componentDidCatch&lt;/code&gt; method, we simply log the &lt;strong&gt;error&lt;/strong&gt; and the &lt;strong&gt;error information&lt;/strong&gt; to the console.&lt;/p&gt;        &lt;h3&gt;          &lt;a href="#where-should-you-place-your-error-boundaries"&gt;          &lt;/a&gt;          Where Should You Place Your Error Boundaries?        &lt;/h3&gt;
        &lt;p&gt;What we initially did was enclose all the &lt;code&gt;Demo&lt;/code&gt; components with our error boundary. So if there is an error in any component (within the error boundary), &lt;strong&gt;everything&lt;/strong&gt; within the error boundary (including healthy components) will be hidden and the fallback view rendered. Not ideal!&lt;br&gt;        We should isolate each &lt;code&gt;Demo&lt;/code&gt; component with an error boundary so only the faulty component gets hidden by the fallback view.&lt;/p&gt;
        &lt;p&gt;&lt;br&gt;&lt;br&gt;        Let us edit our &lt;code&gt;App.js&lt;/code&gt; file by wrapping each &lt;code&gt;Demo&lt;/code&gt; component with our error boundary:&lt;br&gt;        &lt;/p&gt;
        &lt;div class="highlight js-code-highlight"&gt;        &lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Demo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;        &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./ErrorBoundary&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ErrorBoundary&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Demo&lt;/span&gt;  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"black"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;              &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ErrorBoundary&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ErrorBoundary&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Demo&lt;/span&gt;  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"black"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;              &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ErrorBoundary&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ErrorBoundary&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Demo&lt;/span&gt;  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"white"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;              &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ErrorBoundary&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;          &lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;


        &lt;p&gt;&lt;br&gt;&lt;br&gt;        Now, we can see that only the third &lt;code&gt;Demo&lt;/code&gt; component (which has an error) gets hidden by the fallback view:&lt;br&gt;        &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AtE7NTW1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/john5ibb1z5xusodq7g2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AtE7NTW1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/john5ibb1z5xusodq7g2.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;&lt;br&gt;&lt;br&gt;        The placement of your error boundary is totally up to you. But it is reasonable to isolate your components so that other components do not get affected when one or few component(s) throw(s) an error.&lt;/p&gt;
        &lt;h3&gt;          &lt;a href="#conclusion"&gt;          &lt;/a&gt;          Conclusion.        &lt;/h3&gt;
        &lt;p&gt;In the last few minutes, we have learned what an error boundary is, and the lifecycle methods it implements. We have also seen how to create and use it in our react applications. Hopefully, you now have the basic skills to handle errors in your React projects ‚ú®‚ú®&lt;/p&gt;
      </description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 Mistakes people do on Twitter when trying to grow their account</title>
      <author>Pasca Vlad</author>
      <pubDate>Thu, 27 May 2021 12:00:03 +0000</pubDate>
      <link>https://dev.to/pascavld/5-mistakes-people-do-on-twitter-when-trying-to-grow-their-account-1opk</link>
      <guid>https://dev.to/pascavld/5-mistakes-people-do-on-twitter-when-trying-to-grow-their-account-1opk</guid>
      <description>&lt;p&gt;&lt;em&gt;If you found value in this thread you will most likely enjoy my tweets too so make sure you follow me on &lt;a href="https://twitter.com/VladPasca5"&gt;Twitter&lt;/a&gt;  for more information about web development and how to improve as a developer. This article was first published on my &lt;a href="https://vladpasca.hashnode.dev/"&gt;Blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
        &lt;h3&gt;          &lt;a href="#1-they-are-not-consistent"&gt;          &lt;/a&gt;          1. They are not consistent        &lt;/h3&gt;
        &lt;p&gt;If you want to grow on any social media platform, not only Twitter, you need to be consistent&lt;/p&gt;
        &lt;p&gt;Post a Tweet every single day&lt;/p&gt;
        &lt;p&gt;Not only that Twitter algorithm will push your tweets more if you are consistent but you will also grow faster&lt;/p&gt;
        &lt;h3&gt;          &lt;a href="#2-they-dont-engage-with-bigger-accounts"&gt;          &lt;/a&gt;          2. They don't engage with bigger accounts        &lt;/h3&gt;
        &lt;p&gt;In the beginning, no one will see your tweets&lt;/p&gt;
        &lt;p&gt;Unfortunately, this is the truth&lt;/p&gt;
        &lt;p&gt;To grow in the beginning, you need to engage with a bigger account&lt;/p&gt;
        &lt;p&gt;Reply to their tweets and add value&lt;/p&gt;
        &lt;p&gt;Do this until you get to over 1000 followers&lt;/p&gt;
        &lt;h3&gt;          &lt;a href="#3-they-use-a-lot-of-hashtags"&gt;          &lt;/a&gt;          3. They use a lot of hashtags        &lt;/h3&gt;
        &lt;p&gt;Using more than 2 hashtags on your posts is useless&lt;/p&gt;
        &lt;p&gt;You could use at max 2 hashtags until you get to 1000-1500 followers&lt;/p&gt;
        &lt;p&gt;But after that drop them&lt;/p&gt;
        &lt;p&gt;They just make your posts look spammy and no one wants to engage with spammy tweets&lt;/p&gt;
        &lt;h3&gt;          &lt;a href="#4-they-have-a-bad-bio"&gt;          &lt;/a&gt;          4. They have a bad bio        &lt;/h3&gt;
        &lt;p&gt;Your bio should tell others who you are, what's your content is about, and what they get if they follow you&lt;/p&gt;
        &lt;p&gt;Don't use hashtags in your bio&lt;/p&gt;
        &lt;p&gt;Keep it simple and don't talk about useless stuff&lt;/p&gt;
        &lt;h3&gt;          &lt;a href="#5-they-dont-know-how-to-format-their-tweets"&gt;          &lt;/a&gt;          5. They don't know how to format their tweets        &lt;/h3&gt;
        &lt;p&gt;You need to add more spaces between in your tweets&lt;/p&gt;
        &lt;p&gt;Like I do&lt;/p&gt;
        &lt;p&gt;This will make your tweets easier to read and people will engage more with them&lt;/p&gt;
        &lt;h3&gt;          &lt;a href="#the-end"&gt;          &lt;/a&gt;          The end        &lt;/h3&gt;
        &lt;p&gt;&lt;em&gt;I hope found this useful and if you did please let me know. If you have any question feel free to DM me on  &lt;a href="https://twitter.com/VladPasca5"&gt;Twitter&lt;/a&gt; .&lt;/em&gt;&lt;/p&gt;
      </description>
      <category>twitter</category>
      <category>socialmedia</category>
      <category>content</category>
      <category>audience</category>
    </item>
  </channel>
</rss>
